generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model assinatura {
  idAssinatura  Int       @id @default(autoincrement())
  codPagamento  String?   @db.Text
  ativo         Boolean?
  data_inicio   DateTime? @db.Date
  ultimo_update DateTime? @db.Date
  planos        planos    @relation(fields: [idPlanos], references: [idPlanos], onDelete: Restrict, onUpdate: Cascade)
  idPlanos      Int
  contas        contas    @relation(fields: [idConta], references: [idConta], onDelete: Restrict, onUpdate: Cascade)
  idConta       Int
}

model historicoPagamento {
  idHistoricoPagamento Int       @id @default(autoincrement())
  nome                 String    @db.VarChar(45)
  descricao            String    @db.Text
  pago                 Boolean
  valorTotal           Float
  data_inicio          DateTime? @db.Date
  contas               contas    @relation(fields: [idConta], references: [idConta], onDelete: Restrict, onUpdate: Cascade)
  idConta              Int
}

model planos {
  idPlanos           Int                @id @default(autoincrement())
  nome               String             @db.VarChar(45)
  subtitulo          String             @db.VarChar(100)
  descricao          String             @db.Text
  valorTotal         Float
  tipoFuncionalidade tipoFuncionalidade
  tipo               tipoPlano
  qtdePessoas        Int
  meses              Int
  maxSessoes         Float
  assinatura         assinatura[]
  grupos             grupos[]
}

model autenticacao {
  idAutenticacao Int    @id @default(autoincrement())
  email          String @db.VarChar(100)
  senha          String @db.VarChar(80)
  conta          contas @relation(fields: [idConta], references: [idConta], onDelete: Restrict, onUpdate: Cascade)
  idConta        Int
}

model contas {
  idConta            Int                  @id @default(autoincrement())
  nome               String               @db.VarChar(45)
  data_nasc          DateTime             @db.Date
  foto               String?              @db.Text
  celular            String               @db.VarChar(15)
  fagerstrom         Boolean              @default(false) @db.TinyInt
  perfil             contas_perfil
  idQuestionario     Int?
  autenticacao       autenticacao[]
  historicoPagamento historicoPagamento[]
  assinaturas        assinatura[]
  questionario       questionario?        @relation(fields: [idQuestionario], references: [idQuestionario], onDelete: Restrict, onUpdate: Cascade)
}

model questionario {
  idQuestionario Int      @id @default(autoincrement())
  questao1       String?  @db.VarChar(45)
  questao2       String?  @db.VarChar(45)
  questao3       String?  @db.VarChar(45)
  questao4       String?  @db.VarChar(45)
  questao5       String?  @db.VarChar(45)
  questao6       String?  @db.VarChar(45)
  contas         contas[]
}

model geral {
  idGeral       Int    @id @default(autoincrement())
  emailContato  String @db.VarChar(100)
  emailMedico   String @db.VarChar(100)
  numeroContato String @db.VarChar(15)
}

model grupos {
  idGrupo    Int      @id @default(autoincrement())
  dataInicio DateTime @db.Date
  dataFinal  DateTime @db.Date
  link       String?   @db.Text
  planos     planos   @relation(fields: [idPlanos], references: [idPlanos], onDelete: Restrict, onUpdate: Cascade)
  idPlanos   Int
  datas      datas[]
}

model grupoConta {
  idGrupoConta Int @id @default(autoincrement())
  idGrupo      Int
  idConta      Int
}

model datas {
  idData  Int    @id @default(autoincrement())
  dia     dias
  hora    String @db.VarChar(10)
  grupos  grupos @relation(fields: [idGrupo], references: [idGrupo], onDelete: Restrict, onUpdate: Cascade)
  idGrupo Int
}

enum contas_perfil {
  Admin
  Usuario
  Nutricionista
}

enum dias {
  Segunda
  Terca
  Quarta
  Quinta
  Sexta
  Sabado
  Domingo
}

enum tipoFuncionalidade {
  Nutricao
  Tabaquismo
}

enum tipoPlano {
  Individual
  Grupo
  Mentoria
}
